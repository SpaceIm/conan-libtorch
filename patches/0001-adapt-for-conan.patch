diff --git a/CMakeLists.txt b/CMakeLists.txt
index 24d3c9b3a4..66cb5bbf90 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -272,7 +272,7 @@ if(WIN32)
   set(USE_TENSORPIPE OFF)
   message(WARNING "TensorPipe cannot be used on Windows. Set it to OFF")
 
-  if(USE_DISTRIBUTED AND NOT DEFINED ENV{libuv_ROOT})
+  if(0) # libuv is useless for windows build, don't disable USE_DISTRIBUTED for that
     find_library(
       libuv_tmp_LIBRARY
       NAMES uv libuv
@@ -336,7 +336,7 @@ cmake_dependent_option(
 
 if(NOT USE_SYSTEM_ONNX)
   set(ONNX_NAMESPACE "onnx_torch" CACHE STRING "A namespace for ONNX; needed to build with other frameworks that share ONNX.")
-elseif()
+else()
   set(ONNX_NAMESPACE "onnx" CACHE STRING "A namespace for ONNX; needed to build with other frameworks that share ONNX.")
 endif()
 set(SELECTED_OP_LIST "" CACHE STRING
@@ -538,6 +538,8 @@ endif()
 # The below means we are cross compiling for arm64 or x86_64 on MacOSX
 if(NOT IOS AND CMAKE_SYSTEM_NAME STREQUAL "Darwin" AND CMAKE_OSX_ARCHITECTURES MATCHES "^(x86_64|arm64)$")
   set(CROSS_COMPILING_MACOSX TRUE)
+endif()
+if(0)
   # We need to compile a universal protoc to not fail protobuf build
   execute_process(COMMAND ./scripts/build_host_protoc.sh --other-flags "-DCMAKE_OSX_ARCHITECTURES=x86_64;arm64"
                   WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
@@ -617,7 +619,6 @@ endif()
 set(CMAKE_C_STANDARD 11)
 set(CMAKE_CXX_STANDARD 14)
 if(NOT MSVC)
-  string(APPEND CMAKE_CXX_FLAGS " -O2 -fPIC")
   string(APPEND CMAKE_CXX_FLAGS " -Wno-narrowing")
   # Eigen fails to build with some versions, so convert this to a warning
   # Details at http://eigen.tuxfamily.org/bz/show_bug.cgi?id=1459
@@ -792,7 +793,7 @@ include_directories(BEFORE ${PROJECT_SOURCE_DIR})
 include_directories(BEFORE ${PROJECT_BINARY_DIR})
 
 include_directories(BEFORE ${PROJECT_SOURCE_DIR}/aten/src/)
-include_directories(BEFORE ${PROJECT_BINARY_DIR}/aten/src/)
+include_directories(BEFORE ${CMAKE_BINARY_DIR}/aten/src/)
 
 # ---[ Main build
 add_subdirectory(c10)
diff --git a/aten/src/ATen/CMakeLists.txt b/aten/src/ATen/CMakeLists.txt
index 486724d180..eb87a1a2d3 100644
--- a/aten/src/ATen/CMakeLists.txt
+++ b/aten/src/ATen/CMakeLists.txt
@@ -298,13 +298,6 @@ if(NOT MSVC AND NOT EMSCRIPTEN AND NOT INTERN_BUILD_MOBILE)
     list(APPEND ATen_THIRD_PARTY_INCLUDE ${CMAKE_BINARY_DIR}/include)
     link_directories(${CMAKE_BINARY_DIR}/sleef/lib)
   else()
-    add_library(sleef SHARED IMPORTED)
-    find_library(SLEEF_LIBRARY sleef)
-    if(NOT SLEEF_LIBRARY)
-      message(FATAL_ERROR "Cannot find sleef")
-    endif()
-    message("Found sleef: ${SLEEF_LIBRARY}")
-    set_target_properties(sleef PROPERTIES IMPORTED_LOCATION "${SLEEF_LIBRARY}")
   endif()
   list(APPEND ATen_CPU_DEPENDENCY_LIBS sleef)
 
diff --git a/c10/CMakeLists.txt b/c10/CMakeLists.txt
index b175e5bdd6..a267af43d1 100644
--- a/c10/CMakeLists.txt
+++ b/c10/CMakeLists.txt
@@ -106,7 +106,10 @@ endif()
 # Note: for now, we will put all export path into one single Caffe2Targets group
 # to deal with the cmake deployment need. Inside the Caffe2Targets set, the
 # individual libraries like libc10.so and libcaffe2.so are still self-contained.
-install(TARGETS c10 EXPORT Caffe2Targets DESTINATION lib)
+install(TARGETS c10 EXPORT Caffe2Targets
+        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR})
 install(DIRECTORY ${CMAKE_CURRENT_LIST_DIR}
         DESTINATION include
         FILES_MATCHING PATTERN "*.h")
@@ -114,5 +117,5 @@ install(FILES ${CMAKE_BINARY_DIR}/c10/macros/cmake_macros.h
         DESTINATION include/c10/macros)
 
 if(MSVC AND C10_BUILD_SHARED_LIBS)
-  install(FILES $<TARGET_PDB_FILE:c10> DESTINATION lib OPTIONAL)
+  install(FILES $<TARGET_PDB_FILE:c10> DESTINATION ${CMAKE_INSTALL_BINDIR} OPTIONAL)
 endif()
diff --git a/c10/cuda/CMakeLists.txt b/c10/cuda/CMakeLists.txt
index 256fc54b08..d547f0040b 100644
--- a/c10/cuda/CMakeLists.txt
+++ b/c10/cuda/CMakeLists.txt
@@ -64,7 +64,10 @@ add_subdirectory(test)
 # Note: for now, we will put all export path into one single Caffe2Targets group
 # to deal with the cmake deployment need. Inside the Caffe2Targets set, the
 # individual libraries like libc10.so and libcaffe2.so are still self-contained.
-install(TARGETS c10_cuda EXPORT Caffe2Targets DESTINATION lib)
+install(TARGETS c10_cuda EXPORT Caffe2Targets
+        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR})
 foreach(file ${C10_CUDA_HEADERS})
   get_filename_component( dir ${file} DIRECTORY )
   install( FILES ${file} DESTINATION include/c10/cuda/${dir} )
@@ -73,5 +76,5 @@ install(FILES ${CMAKE_BINARY_DIR}/c10/cuda/impl/cuda_cmake_macros.h
   DESTINATION include/c10/cuda/impl)
 
 if(MSVC AND C10_CUDA_BUILD_SHARED_LIBS)
-  install(FILES $<TARGET_PDB_FILE:c10_cuda> DESTINATION lib OPTIONAL)
+  install(FILES $<TARGET_PDB_FILE:c10_cuda> DESTINATION ${CMAKE_INSTALL_BINDIR} OPTIONAL)
 endif()
diff --git a/c10/hip/CMakeLists.txt b/c10/hip/CMakeLists.txt
index 6a0e0e41a1..424099c56e 100644
--- a/c10/hip/CMakeLists.txt
+++ b/c10/hip/CMakeLists.txt
@@ -55,7 +55,10 @@ target_include_directories(
 add_subdirectory(test)
 
 # ---[ Installation
-install(TARGETS c10_hip EXPORT Caffe2Targets DESTINATION lib)
+install(TARGETS c10_hip EXPORT Caffe2Targets
+        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR})
 install(DIRECTORY ${CMAKE_CURRENT_LIST_DIR}
         DESTINATION include
         FILES_MATCHING PATTERN "*.h")
diff --git a/caffe2/CMakeLists.txt b/caffe2/CMakeLists.txt
index 7bef849c08..287c1b7fbf 100644
--- a/caffe2/CMakeLists.txt
+++ b/caffe2/CMakeLists.txt
@@ -60,7 +60,7 @@ if(INTERN_BUILD_ATEN_OPS)
   "${PYTHON_EXECUTABLE}" ${CMAKE_CURRENT_SOURCE_DIR}/contrib/aten/gen_op.py
     --aten_root=${CMAKE_CURRENT_SOURCE_DIR}/../aten
     --template_dir=${CMAKE_CURRENT_SOURCE_DIR}/contrib/aten
-    --yaml_dir=${CMAKE_CURRENT_BINARY_DIR}/../aten/src/ATen
+    --yaml_dir=${CMAKE_BINARY_DIR}/aten/src/ATen
     --install_dir=${CMAKE_CURRENT_BINARY_DIR}/contrib/aten
   DEPENDS
   ATEN_CPU_FILES_GEN_TARGET
@@ -98,7 +98,7 @@ endif()
 # Note: the folders that are being commented out have not been properly
 # addressed yet.
 
-if(NOT MSVC AND USE_XNNPACK)
+if(0)
   if(NOT TARGET fxdiv)
     set(FXDIV_BUILD_TESTS OFF CACHE BOOL "")
     set(FXDIV_BUILD_BENCHMARKS OFF CACHE BOOL "")
@@ -348,7 +348,7 @@ if(NOT INTERN_BUILD_MOBILE OR NOT BUILD_CAFFE2_MOBILE)
     # up being empty. Downstream targets should also add a #ifdef guard.
     if(NOT WIN32)
       add_library(process_group_agent "${TORCH_SRC_DIR}/csrc/distributed/rpc/process_group_agent.cpp" "${TORCH_SRC_DIR}/csrc/distributed/rpc/process_group_agent.h")
-      target_link_libraries(process_group_agent PRIVATE torch c10d fmt::fmt-header-only)
+      target_link_libraries(process_group_agent PRIVATE torch c10d CONAN_PKG::fmt)
       add_dependencies(process_group_agent torch c10d)
 
       add_library(tensorpipe_agent
@@ -358,7 +358,7 @@ if(NOT INTERN_BUILD_MOBILE OR NOT BUILD_CAFFE2_MOBILE)
         "${TORCH_SRC_DIR}/csrc/distributed/rpc/tensorpipe_utils.cpp"
         "${TORCH_SRC_DIR}/csrc/distributed/rpc/tensorpipe_utils.h"
         )
-      target_link_libraries(tensorpipe_agent PRIVATE torch c10d tensorpipe fmt::fmt-header-only)
+      target_link_libraries(tensorpipe_agent PRIVATE torch c10d CONAN_PKG::fmt)
       add_dependencies(tensorpipe_agent torch c10d)
       if(USE_TENSORPIPE)
         if(USE_CUDA)
@@ -373,8 +373,7 @@ if(NOT INTERN_BUILD_MOBILE OR NOT BUILD_CAFFE2_MOBILE)
         endif()
 
         target_compile_definitions(tensorpipe_agent PUBLIC USE_TENSORPIPE)
-        target_link_libraries(tensorpipe_agent PRIVATE tensorpipe)
-        add_dependencies(tensorpipe_agent tensorpipe)
+        target_link_libraries(tensorpipe_agent PRIVATE CONAN_PKG::tensorpipe)
       endif()
     endif()
   endif()
@@ -581,8 +580,11 @@ if(NOT INTERN_BUILD_MOBILE OR NOT BUILD_CAFFE2_MOBILE)
       set(DELAY_LOAD_FLAGS "")
     endif()
     target_link_libraries(caffe2_nvrtc ${CUDA_NVRTC} ${CUDA_CUDA_LIB} ${CUDA_NVRTC_LIB} ${DELAY_LOAD_FLAGS})
-    target_include_directories(caffe2_nvrtc PRIVATE ${CUDA_INCLUDE_DIRS})
-    install(TARGETS caffe2_nvrtc DESTINATION "${TORCH_INSTALL_LIB_DIR}")
+    target_include_directories(caffe2_nvrtc PRIVATE ${CUDA_INCLUDE_DIRS} ${CMAKE_BINARY_DIR})
+    install(TARGETS caffe2_nvrtc
+            RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+            ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+            LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR})
     if(USE_NCCL AND BUILD_SPLIT_CUDA)
       list(APPEND Caffe2_GPU_SRCS_CPP
         ${TORCH_SRC_DIR}/csrc/cuda/nccl.cpp)
@@ -607,7 +609,10 @@ if(NOT INTERN_BUILD_MOBILE OR NOT BUILD_CAFFE2_MOBILE)
     add_library(caffe2_nvrtc SHARED ${ATen_NVRTC_STUB_SRCS})
     target_link_libraries(caffe2_nvrtc ${PYTORCH_HIP_HCC_LIBRARIES} ${ROCM_HIPRTC_LIB})
     target_compile_definitions(caffe2_nvrtc PRIVATE USE_ROCM __HIP_PLATFORM_HCC__)
-    install(TARGETS caffe2_nvrtc DESTINATION "${TORCH_INSTALL_LIB_DIR}")
+    install(TARGETS caffe2_nvrtc
+            RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+            ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+            LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR})
   endif()
 
   if(NOT NO_API)
@@ -856,7 +861,6 @@ if(USE_CUDA OR USE_ROCM)
 endif()
 
 if(NOT MSVC AND USE_XNNPACK)
-  TARGET_LINK_LIBRARIES(torch_cpu PRIVATE fxdiv)
 endif()
 
 # ==========================================================
@@ -1253,18 +1257,36 @@ endif()
 
 caffe2_interface_library(torch torch_library)
 
-install(TARGETS torch_cpu torch_cpu_library EXPORT Caffe2Targets DESTINATION "${TORCH_INSTALL_LIB_DIR}")
+install(TARGETS torch_cpu torch_cpu_library EXPORT Caffe2Targets
+        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR})
 
 if(USE_CUDA)
-  install(TARGETS torch_cuda torch_cuda_library EXPORT Caffe2Targets DESTINATION "${TORCH_INSTALL_LIB_DIR}")
+  install(TARGETS torch_cuda torch_cuda_library EXPORT Caffe2Targets
+          RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+          ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+          LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR})
   if(BUILD_SPLIT_CUDA)
-    install(TARGETS torch_cuda_cu torch_cuda_cu_library EXPORT Caffe2Targets DESTINATION "${TORCH_INSTALL_LIB_DIR}")
-    install(TARGETS torch_cuda_cpp torch_cuda_cpp_library EXPORT Caffe2Targets DESTINATION "${TORCH_INSTALL_LIB_DIR}")
+    install(TARGETS torch_cuda_cu torch_cuda_cu_library EXPORT Caffe2Targets
+            RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+            ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+            LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR})
+    install(TARGETS torch_cuda_cpp torch_cuda_cpp_library EXPORT Caffe2Targets
+            RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+            ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+            LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR})
   endif()
 elseif(USE_ROCM)
-  install(TARGETS torch_hip torch_hip_library EXPORT Caffe2Targets DESTINATION "${TORCH_INSTALL_LIB_DIR}")
+  install(TARGETS torch_hip torch_hip_library EXPORT Caffe2Targets
+          RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+          ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+          LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR})
 endif()
-install(TARGETS torch torch_library EXPORT Caffe2Targets DESTINATION "${TORCH_INSTALL_LIB_DIR}")
+install(TARGETS torch torch_library EXPORT Caffe2Targets
+        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR})
 
 target_link_libraries(torch PUBLIC torch_cpu_library)
 
@@ -1280,14 +1302,14 @@ endif()
 
 # Install PDB files for MSVC builds
 if(MSVC AND BUILD_SHARED_LIBS)
-  install(FILES $<TARGET_PDB_FILE:torch_cpu> DESTINATION "${TORCH_INSTALL_LIB_DIR}" OPTIONAL)
+  install(FILES $<TARGET_PDB_FILE:torch_cpu> DESTINATION ${CMAKE_INSTALL_BINDIR} OPTIONAL)
   if(BUILD_SPLIT_CUDA)
-    install(FILES $<TARGET_PDB_FILE:torch_cuda_cu> DESTINATION "${TORCH_INSTALL_LIB_DIR}" OPTIONAL)
-    install(FILES $<TARGET_PDB_FILE:torch_cuda_cpp> DESTINATION "${TORCH_INSTALL_LIB_DIR}" OPTIONAL)
+    install(FILES $<TARGET_PDB_FILE:torch_cuda_cu> DESTINATION ${CMAKE_INSTALL_BINDIR} OPTIONAL)
+    install(FILES $<TARGET_PDB_FILE:torch_cuda_cpp> DESTINATION ${CMAKE_INSTALL_BINDIR} OPTIONAL)
   elseif(USE_CUDA)
-    install(FILES $<TARGET_PDB_FILE:torch_cuda> DESTINATION "${TORCH_INSTALL_LIB_DIR}" OPTIONAL)
+    install(FILES $<TARGET_PDB_FILE:torch_cuda> DESTINATION ${CMAKE_INSTALL_BINDIR} OPTIONAL)
   elseif(USE_ROCM)
-    install(FILES $<TARGET_PDB_FILE:torch_hip> DESTINATION "${TORCH_INSTALL_LIB_DIR}" OPTIONAL)
+    install(FILES $<TARGET_PDB_FILE:torch_hip> DESTINATION ${CMAKE_INSTALL_BINDIR} OPTIONAL)
   endif()
 endif()
 
diff --git a/caffe2/perfkernels/CMakeLists.txt b/caffe2/perfkernels/CMakeLists.txt
index 1fe8bca697..2fa168fd0e 100644
--- a/caffe2/perfkernels/CMakeLists.txt
+++ b/caffe2/perfkernels/CMakeLists.txt
@@ -56,6 +56,11 @@ if(CAFFE2_COMPILER_SUPPORTS_AVX2_EXTENSIONS)
   list(APPEND
        Caffe2_DEPENDENCY_WHOLE_LINK_LIBS
        "Caffe2_perfkernels_avx2_interface")
+  if(NOT BUILD_SHARED_LIBS)
+    install(TARGETS Caffe2_perfkernels_avx Caffe2_perfkernels_avx2
+            EXPORT Caffe2Targets
+            DESTINATION ${CMAKE_INSTALL_LIBDIR})
+  endif()
 
   if(CAFFE2_COMPILER_SUPPORTS_AVX512_EXTENSIONS)
     add_library(Caffe2_perfkernels_avx512 STATIC ${avx512_srcs})
@@ -84,6 +89,11 @@ if(CAFFE2_COMPILER_SUPPORTS_AVX2_EXTENSIONS)
     list(APPEND
          Caffe2_DEPENDENCY_WHOLE_LINK_LIBS
          "Caffe2_perfkernels_avx512_interface")
+    if(NOT BUILD_SHARED_LIBS)
+      install(TARGETS Caffe2_perfkernels_avx512
+              EXPORT Caffe2Targets
+              DESTINATION ${CMAKE_INSTALL_LIBDIR})
+    endif()
   endif()
 endif()
 
diff --git a/cmake/Codegen.cmake b/cmake/Codegen.cmake
index a9d2e4f50e..a8bd3a2a94 100644
--- a/cmake/Codegen.cmake
+++ b/cmake/Codegen.cmake
@@ -233,7 +233,7 @@ if(INTERN_BUILD_ATEN_OPS)
 endif()
 
 function(append_filelist name outputvar)
-  set(_rootdir "${${CMAKE_PROJECT_NAME}_SOURCE_DIR}/")
+  set(_rootdir "${Torch_SOURCE_DIR}/")
   # configure_file adds its input to the list of CMAKE_RERUN dependencies
   configure_file(
       ${PROJECT_SOURCE_DIR}/tools/build_variables.bzl
diff --git a/cmake/Dependencies.cmake b/cmake/Dependencies.cmake
index 06464e799a..b6b2472930 100644
--- a/cmake/Dependencies.cmake
+++ b/cmake/Dependencies.cmake
@@ -82,7 +82,7 @@ else()
       "Cannot find threading library. Caffe2 requires Threads to compile.")
 endif()
 
-if(USE_TBB)
+if(0)
   message(STATUS "Compiling TBB from source")
   # Unset our restrictive C++ flags here and reset them later.
   # Remove this once we use proper target_compile_options.
@@ -131,8 +131,7 @@ elseif(BLAS STREQUAL "ATLAS")
   list(APPEND Caffe2_PUBLIC_DEPENDENCY_LIBS cblas)
 elseif(BLAS STREQUAL "OpenBLAS")
   find_package(OpenBLAS REQUIRED)
-  include_directories(SYSTEM ${OpenBLAS_INCLUDE_DIR})
-  list(APPEND Caffe2_PUBLIC_DEPENDENCY_LIBS ${OpenBLAS_LIB})
+  list(APPEND Caffe2_PUBLIC_DEPENDENCY_LIBS OpenBLAS::OpenBLAS)
 elseif(BLAS STREQUAL "MKL")
   if(BLAS_SET_BY_USER)
     find_package(MKL REQUIRED)
@@ -465,7 +464,6 @@ if(USE_PYTORCH_QNNPACK)
       # We build static versions of QNNPACK and pthreadpool but link
       # them into a shared library for Caffe2, so they need PIC.
       set_property(TARGET pytorch_qnnpack PROPERTY POSITION_INDEPENDENT_CODE ON)
-      set_property(TARGET cpuinfo PROPERTY POSITION_INDEPENDENT_CODE ON)
 
       if(PYTORCH_QNNPACK_CUSTOM_THREADPOOL)
         target_compile_definitions(
@@ -495,7 +493,6 @@ endif()
 
 # ---[ NNPACK
 if(USE_NNPACK)
-  include(${CMAKE_CURRENT_LIST_DIR}/External/nnpack.cmake)
   if(NNPACK_FOUND)
     if(TARGET nnpack)
       # ---[ NNPACK is being built together with Caffe2: explicitly specify dependency
@@ -542,13 +539,8 @@ if(USE_XNNPACK AND NOT USE_SYSTEM_XNNPACK)
   include_directories(SYSTEM ${XNNPACK_INCLUDE_DIR})
   list(APPEND Caffe2_DEPENDENCY_LIBS XNNPACK)
 elseif(NOT TARGET XNNPACK AND USE_SYSTEM_XNNPACK)
-  add_library(XNNPACK SHARED IMPORTED)
-  find_library(XNNPACK_LIBRARY XNNPACK)
-  set_property(TARGET XNNPACK PROPERTY IMPORTED_LOCATION "${XNNPACK_LIBRARY}")
-  if(NOT XNNPACK_LIBRARY)
-    message(FATAL_ERROR "Cannot find XNNPACK")
-  endif()
-  message("-- Found XNNPACK: ${XNNPACK_LIBRARY}")
+  add_library(XNNPACK INTERFACE IMPORTED)
+  set_property(TARGET XNNPACK PROPERTY INTERFACE_LINK_LIBRARIES CONAN_PKG::xnnpack)
   list(APPEND Caffe2_DEPENDENCY_LIBS XNNPACK)
 endif()
 
@@ -992,6 +984,7 @@ if(BUILD_PYTHON)
 endif()
 
 # ---[ pybind11
+if(BUILD_PYTHON)
 if(NOT pybind11_PREFER_third_party)
   find_package(pybind11 CONFIG)
   if(NOT pybind11_FOUND)
@@ -1013,6 +1006,7 @@ else()
 endif()
 message(STATUS "pybind11 include dirs: " "${pybind11_INCLUDE_DIRS}")
 include_directories(SYSTEM ${pybind11_INCLUDE_DIRS})
+endif()
 
 # ---[ MPI
 if(USE_MPI)
@@ -1349,9 +1343,8 @@ if(USE_DISTRIBUTED AND USE_TENSORPIPE)
     set(TP_BUILD_LIBUV ON CACHE BOOL "" FORCE)
     set(TP_STATIC_OR_SHARED STATIC CACHE STRING "" FORCE)
 
-    add_subdirectory(${PROJECT_SOURCE_DIR}/third_party/tensorpipe)
 
-    list(APPEND Caffe2_DEPENDENCY_LIBS tensorpipe)
+    list(APPEND Caffe2_DEPENDENCY_LIBS CONAN_PKG::tensorpipe)
   endif()
 endif()
 
@@ -1431,7 +1424,6 @@ if(CAFFE2_CMAKE_BUILDING_WITH_MAIN_REPO AND NOT INTERN_DISABLE_ONNX)
   if(NOT USE_SYSTEM_ONNX)
     add_subdirectory(${CMAKE_CURRENT_LIST_DIR}/../third_party/onnx EXCLUDE_FROM_ALL)
   endif()
-  add_subdirectory(${CMAKE_CURRENT_LIST_DIR}/../third_party/foxi EXCLUDE_FROM_ALL)
 
   add_definitions(-DONNX_NAMESPACE=${ONNX_NAMESPACE})
   if(NOT USE_SYSTEM_ONNX)
@@ -1445,23 +1437,11 @@ if(CAFFE2_CMAKE_BUILDING_WITH_MAIN_REPO AND NOT INTERN_DISABLE_ONNX)
     endif()
     list(APPEND Caffe2_DEPENDENCY_WHOLE_LINK_LIBS onnx_library)
   else()
-    add_library(onnx SHARED IMPORTED)
-    find_library(ONNX_LIBRARY onnx)
-    if(NOT ONNX_LIBRARY)
-      message(FATAL_ERROR "Cannot find onnx")
-    endif()
-    set_property(TARGET onnx PROPERTY IMPORTED_LOCATION ${ONNX_LIBRARY})
-    add_library(onnx_proto SHARED IMPORTED)
-    find_library(ONNX_PROTO_LIBRARY onnx_proto)
-    if(NOT ONNX_PROTO_LIBRARY)
-      message(FATAL_ERROR "Cannot find onnx")
-    endif()
-    set_property(TARGET onnx_proto PROPERTY IMPORTED_LOCATION ${ONNX_PROTO_LIBRARY})
-    message("-- Found onnx: ${ONNX_LIBRARY} ${ONNX_PROTO_LIBRARY}")
+    find_package(ONNX REQUIRED CONFIG)
     list(APPEND Caffe2_DEPENDENCY_LIBS onnx_proto onnx)
   endif()
   include_directories(${FOXI_INCLUDE_DIRS})
-  list(APPEND Caffe2_DEPENDENCY_LIBS foxi_loader)
+  list(APPEND Caffe2_DEPENDENCY_LIBS CONAN_PKG::foxi)
   # Recover the build shared libs option.
   set(BUILD_SHARED_LIBS ${TEMP_BUILD_SHARED_LIBS})
 endif()
@@ -1661,8 +1641,9 @@ if(NOT INTERN_BUILD_MOBILE)
       CACHE BOOL "Copy the required BLAS DLLs into the TH install dirs")
   endif()
 
-  find_package(LAPACK)
-  if(LAPACK_FOUND)
+  option(USE_LAPACK "Use LAPACK" ON)
+  if(USE_LAPACK)
+    find_package(LAPACK REQUIRED)
     set(USE_LAPACK 1)
     list(APPEND Caffe2_PRIVATE_DEPENDENCY_LIBS ${LAPACK_LIBRARIES})
   else()
@@ -1776,7 +1757,6 @@ endif()
 #
 set(TEMP_BUILD_SHARED_LIBS ${BUILD_SHARED_LIBS})
 set(BUILD_SHARED_LIBS OFF CACHE BOOL "Build shared libs" FORCE)
-add_subdirectory(${PROJECT_SOURCE_DIR}/third_party/fmt)
 
 # Disable compiler feature checks for `fmt`.
 #
@@ -1785,9 +1765,8 @@ add_subdirectory(${PROJECT_SOURCE_DIR}/third_party/fmt)
 # CMAKE_CXX_FLAGS in ways that break feature checks. Since we already know
 # `fmt` is compatible with a superset of the compilers that PyTorch is, it
 # shouldn't be too bad to just disable the checks.
-set_target_properties(fmt-header-only PROPERTIES INTERFACE_COMPILE_FEATURES "")
 
-list(APPEND Caffe2_DEPENDENCY_LIBS fmt::fmt-header-only)
+list(APPEND Caffe2_DEPENDENCY_LIBS CONAN_PKG::fmt)
 set(BUILD_SHARED_LIBS ${TEMP_BUILD_SHARED_LIBS} CACHE BOOL "Build shared libs" FORCE)
 
 # ---[ Kineto
diff --git a/modules/detectron/CMakeLists.txt b/modules/detectron/CMakeLists.txt
index 8041e71d35..c7ec50eba5 100644
--- a/modules/detectron/CMakeLists.txt
+++ b/modules/detectron/CMakeLists.txt
@@ -17,9 +17,12 @@ if(BUILD_CAFFE2_OPS)
 
     torch_set_target_props(caffe2_detectron_ops_gpu)
     target_link_libraries(caffe2_detectron_ops_gpu torch ${OpenMP_link})
-    install(TARGETS caffe2_detectron_ops_gpu DESTINATION lib)
+    install(TARGETS caffe2_detectron_ops_gpu
+            RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+            ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+            LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR})
     if(MSVC)
-      install(FILES $<TARGET_PDB_FILE:caffe2_detectron_ops_gpu> DESTINATION lib OPTIONAL)
+      install(FILES $<TARGET_PDB_FILE:caffe2_detectron_ops_gpu> DESTINATION ${CMAKE_INSTALL_BINDIR} OPTIONAL)
     endif()
   elseif(USE_ROCM)
     hip_include_directories(${Caffe2_HIP_INCLUDES})
@@ -31,7 +34,10 @@ if(BUILD_CAFFE2_OPS)
     torch_set_target_props(caffe2_detectron_ops_hip)
     target_compile_options(caffe2_detectron_ops_hip PRIVATE ${HIP_CXX_FLAGS})
     target_link_libraries(caffe2_detectron_ops_hip torch)
-    install(TARGETS caffe2_detectron_ops_hip DESTINATION lib)
+    install(TARGETS caffe2_detectron_ops_hip
+            RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+            ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+            LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR})
   elseif(NOT IOS_PLATFORM)
     add_library(caffe2_detectron_ops SHARED ${Detectron_CPU_SRCS})
     if(HAVE_SOVERSION)
@@ -40,9 +46,12 @@ if(BUILD_CAFFE2_OPS)
     endif()
     torch_set_target_props(caffe2_detectron_ops)
     target_link_libraries(caffe2_detectron_ops torch ${OpenMP_link})
-    install(TARGETS caffe2_detectron_ops DESTINATION lib)
+    install(TARGETS caffe2_detectron_ops
+            RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+            ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+            LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR})
     if(MSVC)
-      install(FILES $<TARGET_PDB_FILE:caffe2_detectron_ops> DESTINATION lib OPTIONAL)
+      install(FILES $<TARGET_PDB_FILE:caffe2_detectron_ops> DESTINATION ${CMAKE_INSTALL_BINDIR} OPTIONAL)
     endif()
   endif()
 endif()
diff --git a/modules/observers/CMakeLists.txt b/modules/observers/CMakeLists.txt
index 8796354dc8..378e0af4cf 100644
--- a/modules/observers/CMakeLists.txt
+++ b/modules/observers/CMakeLists.txt
@@ -21,10 +21,13 @@ endif()
 target_link_libraries(caffe2_observers PUBLIC torch_library)
 target_include_directories(caffe2_observers PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/..)
 target_compile_options(caffe2_observers PRIVATE "-DCAFFE2_BUILD_OBSERVER_LIB")
-install(TARGETS caffe2_observers DESTINATION lib)
+install(TARGETS caffe2_observers
+        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR})
 caffe2_interface_library(caffe2_observers caffe2_observers_library)
 if(MSVC AND BUILD_SHARED_LIBS)
-  install(FILES $<TARGET_PDB_FILE:caffe2_observers> DESTINATION lib OPTIONAL)
+  install(FILES $<TARGET_PDB_FILE:caffe2_observers> DESTINATION ${CMAKE_INSTALL_BINDIR} OPTIONAL)
 endif()
 
 if(CAFFE2_CMAKE_BUILDING_WITH_MAIN_REPO)
diff --git a/tools/codegen/dest/register_dispatch_key.py b/tools/codegen/dest/register_dispatch_key.py
index 6ab7f58843..87e762116b 100644
--- a/tools/codegen/dest/register_dispatch_key.py
+++ b/tools/codegen/dest/register_dispatch_key.py
@@ -1,6 +1,6 @@
 from typing import List, Optional, Union
 import itertools
-from typing_extensions import Literal
+from typing import Literal
 from dataclasses import dataclass
 
 from tools.codegen.context import *
diff --git a/tools/codegen/gen.py b/tools/codegen/gen.py
index 4b8e59d2b2..ab4c17a461 100644
--- a/tools/codegen/gen.py
+++ b/tools/codegen/gen.py
@@ -1,6 +1,6 @@
 import os
 from typing import List, Dict, Optional, Tuple, Set, Callable, Any, Union, Sequence
-from typing_extensions import Literal
+from typing import Literal
 import yaml
 from collections import OrderedDict, defaultdict
 import argparse
diff --git a/torch/lib/c10d/CMakeLists.txt b/torch/lib/c10d/CMakeLists.txt
index 4e72e2e32f..87751c779c 100644
--- a/torch/lib/c10d/CMakeLists.txt
+++ b/torch/lib/c10d/CMakeLists.txt
@@ -150,7 +150,10 @@ endif()
 
 target_link_libraries(c10d PUBLIC ${C10D_LIBS})
 
-install(TARGETS c10d DESTINATION lib)
+install(TARGETS c10d
+        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR})
 
 option(BUILD_EXAMPLES "Build examples" OFF)
 if(BUILD_EXAMPLES)
